#!/bin/sh



echo "start of rcS"

# Un comment and use set +e to ignore and set -e to enable 'exit on error control'
set +e
# Un comment the line below to help debug scripts by printing a trace of the script commands
# set -x

set AUTOCNF no
# set AUX_MODE pwm
# set DATAMAN_OPT ""
# set FAILSAFE none
# set FAILSAFE_AUX none
# set FCONFIG /fs/microsd/etc/config.txt
# set FEXTRAS /fs/microsd/etc/extras.txt
# set FMU_MODE pwm
# set FRC /fs/microsd/etc/rc.txt
# set IOFW "/etc/extras/px4_io-v2_default.bin"
set IO_PRESENT no
# set LOG_FILE /fs/microsd/bootlog.txt
# set LOGGER_ARGS ""
# set LOGGER_BUF  14
# set MAV_TYPE none
# set MIXER none
# set MIXER_AUX none
# set MIXER_FILE none
# set MK_MODE none
# set MKBLCTRL_ARG ""
# set OUTPUT_MODE none
# set PARAM_FILE /fs/microsd/params
# set PWM_AUX_DISARMED p:PWM_AUX_DISARMED
# set PWM_AUX_MAX p:PWM_AUX_MAX
# set PWM_AUX_MIN p:PWM_AUX_MIN
# set PWM_AUX_OUT none
# set PWM_AUX_RATE p:PWM_AUX_RATE
# set PWM_DISARMED p:PWM_DISARMED
# set PWM_MAX p:PWM_MAX
# set PWM_MIN p:PWM_MIN
# set PWM_OUT none
# set PWM_RATE p:PWM_RATE
# set RC_INPUT_ARGS ""
# set SDCARD_MIXERS_PATH /fs/microsd/etc/mixers
set STARTUP_TUNE 1
# set USE_IO no
set VEHICLE_TYPE none

# Airframe parameter versioning: airframe maintainers can set this in the
# airframe startup script, and then increase it by one whenever an airframe
# parameter is updated - it will ensure that these parameters will be updated
# when the firmware is flashed.
set PARAM_DEFAULTS_VER 1

#
# Mount the procfs.
#
mount -t procfs /proc

#
# Start CDC/ACM serial driver.
#
sercon

#
# Start the ORB (first app to start)
#
uorb start


if ! param load
then
	param reset
fi

#
# Set AUTOCNF flag to use it in AUTOSTART scripts.
#
if param greater SYS_AUTOCONFIG 0
then
	if param compare SYS_AUTOCONFIG 1
	then
		# Wipe out params except RC*, flight modes, total flight time, accel cal, gyro cal, next flight UUID
		param reset_nostart RC* COM_FLTMODE* LND_FLIGHT_T_* TC_* CAL_ACC* CAL_GYRO* COM_FLIGHT_UUID
	fi

	set AUTOCNF yes
fi


# Start the tone_alarm driver.
# Needs to be started after the parameters are loaded (for CBRK_BUZZER).
# Note that this will still play the already published startup tone.
#
# tone_alarm start

#
# Play the startup tune (if not disabled or there is an error)
#
param compare CBRK_BUZZER 782090
if [ $? != 0 -o $STARTUP_TUNE != 1 ]
then
	tune_control play -t $STARTUP_TUNE
fi


usleep 20000

#
# Optional board defaults: rc.board_defaults
#
set BOARD_RC_DEFAULTS /etc/init.d/rc.board_defaults
if [ -f $BOARD_RC_DEFAULTS ]
then
	echo "Board defaults: ${BOARD_RC_DEFAULTS}"
	sh $BOARD_RC_DEFAULTS
fi
unset BOARD_RC_DEFAULTS

# Dataman requires hundreds of bytes of storage, which is not really possible on Dev A or C
# dataman start

#
# Start the socket communication send_event handler.
#
send_event start

#
# Start the resource load monitor.
#
load_mon start


#
# Set parameters and env variables for selected AUTOSTART.
#

# SYS_AUTOSTART should store the vehicle type, configured by QGroundControl
if ! param compare SYS_AUTOSTART 0
then
	sh /etc/init.d/rc.autostart
fi

#
# If autoconfig parameter was set, reset it and save parameters.
#
if [ $AUTOCNF = yes ]
then
	param set SYS_AUTOCONFIG 0
fi


# #

echo "Starting Sensors"
sensors start

#
# RC update (map raw RC input to calibrate manual control)
#  start before commander
#
rc_update start



#
# board sensors: rc.sensors
#
set BOARD_RC_SENSORS /etc/init.d/rc.board_sensors
if [ -f $BOARD_RC_SENSORS ]
then
	echo "Board sensors: ${BOARD_RC_SENSORS}"
	sh $BOARD_RC_SENSORS
fi
unset BOARD_RC_SENSORS

commander start


# Sensors on the PWM interface bank.
if param compare -s SENS_EN_LL40LS 1
then
	# Clear pins 5 and 6.
	set FMU_MODE pwm4
	set AUX_MODE pwm4
fi


# Check if ATS is enabled
if param compare FD_EXT_ATS_EN 1
then
	# Clear pins 5 and 6.
	set FMU_MODE pwm4
	set AUX_MODE pwm4
fi

if param greater TRIG_MODE 0
then
	# We ONLY support trigger on pins 5+6 or 7+8 when simultanously using AUX for actuator output.
	if param compare TRIG_PINS 56
	then
		# clear pins 5 and 6
		set FMU_MODE pwm4
		set AUX_MODE pwm4
	else
		if param compare TRIG_PINS 78
		then
			# clear pins 7 and 8
			set FMU_MODE pwm6
			set AUX_MODE pwm6
		else
			set FMU_MODE none
			set AUX_MODE none
		fi
	fi

	camera_trigger start
	camera_feedback start
fi


# ----------------------------------------------------
# To run channel 2 PWM on start
# ----------------------------------------------------

# pwm_out mode_pwm
# pwm arm -a
# pwm test -c 2 -p 1000



# #
# # Optional board mavlink streams: rc.board_mavlink
# #
set BOARD_RC_MAVLINK /etc/init.d/rc.board_mavlink
if [ -f $BOARD_RC_MAVLINK ]
then
	echo "Board extras: ${BOARD_RC_MAVLINK}"
	sh $BOARD_RC_MAVLINK
fi
unset BOARD_RC_MAVLINK


#
# Start UART/Serial device drivers.
# Note: rc.serial is auto-generated from Tools/serial/generate_config.py
#
sh /etc/init.d/rc.serial



# Must be started after the serial config is read
rc_input start $RC_INPUT_ARGS
# rc_input start /dev/ttyS0

#
# Configure vehicle type specific parameters.
# Note: rc.vehicle_setup is the entry point for rc.interface,
#       rc.fw_apps, rc.mc_apps, rc.rover_apps, and rc.vtol_apps.
#
sh /etc/init.d/rc.vehicle_setup

navigator start


#
# Set additional parameters and env variables for selected AUTOSTART.
#
if ! param compare SYS_AUTOSTART 0
then
	sh /etc/init.d/rc.autostart.post
fi

if ! param compare SYS_PARAM_VER ${PARAM_DEFAULTS_VER}
then
	echo "Switched to different parameter version. Resetting parameters."
	param set SYS_PARAM_VER ${PARAM_DEFAULTS_VER}
	param set SYS_AUTOCONFIG 2
	param save
	reboot
fi


#
# Unset all script parameters to free RAM.
#
unset AUTOCNF
# unset AUX_MODE
# unset DATAMAN_OPT
# unset FAILSAFE
# unset FAILSAFE_AUX
# unset FCONFIG
# unset FEXTRAS
# unset FMU_MODE
# unset FRC
unset IO_PRESENT
# unset IOFW
# unset LOG_FILE
# unset LOGGER_ARGS
# unset LOGGER_BUF
# unset MAV_TYPE
# unset MIXER
# unset MIXER_AUX
# unset MIXER_FILE
# unset MK_MODE
# unset MKBLCTRL_ARG
# unset OUTPUT_MODE
unset PARAM_DEFAULTS_VER
# unset PARAM_FILE
# unset PWM_AUX_DISARMED
# unset PWM_AUX_MAX
# unset PWM_AUX_MIN
# unset PWM_AUX_OUT
# unset PWM_AUX_RATE
# unset PWM_DISARMED
# unset PWM_MAX
# unset PWM_MIN
# unset PWM_OUT
# unset PWM_RATE
# unset RC_INPUT_ARGS
# unset SDCARD_MIXERS_PATH
unset STARTUP_TUNE
# unset USE_IO
unset VEHICLE_TYPE

#
# Boot is complete, inform MAVLink app(s) that the system is now fully up and running.
#
mavlink boot_complete


echo "Booting Script Completes"
